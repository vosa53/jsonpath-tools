@top JsonPathQuery { RootIdentifier Segments }

Segments { Segment* }
Segment { ChildSegment | DescendantSegment }
DescendantSegment { ".." (BracketedSelection | WildcardSelector | MemberNameShorthand) }
UnknownSelector {""}
ChildSegment { BracketedSelection | ("." (MemberNameShorthand | WildcardSelector)) }
MemberNameShorthand { Name }
WildcardSelector { "*" }
BracketedSelection { "[" list<Selector> "]" }
Selector { UnknownSelector | NameSelector | WildcardSelector | SliceSelector | IndexSelector | FilterSelector }
SliceSelector { Int? ":" Int? (":" Int?)? }
IndexSelector { Int }
NameSelector { String }
FilterSelector { "?" LogicalOrExpression  }
LogicalOrExpression { LogicalAndExpression ("||" LogicalAndExpression)*  }
LogicalAndExpression { BasicExpression  ("&&" BasicExpression)* }
BasicExpression { ParenExpression | ComparisonExpression }
ParenExpression { "!"? "(" LogicalOrExpression ")" }
ComparisonExpression { Comparable ">" Comparable  }
Comparable { Literal | FunctionExpression }
Literal { Number | String | kw<"true"> | kw<"false"> | kw<"null"> }
FunctionExpression { Name "(" list<FunctionArgument> ")" }
FunctionArgument { Literal | LogicalOrExpression | FunctionExpression }

RootIdentifier { "$" }

kw<word> { @specialize[@name={word}]<Name, word> }
@tokens {
  /*True  { "true" }
  False { "false" }
  Null  { "null" }
*/
  Name { @asciiLetter+ }
  Number { '-'? Int frac? exp?  }
  Int  { '0' | $[1-9] @digit* }
  frac { '.' @digit+ }
  exp  { $[eE] $[+\-]? @digit+ }

  String { '"' char* '"' }
  char { $[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" esc }
  esc  { $["\\\/bfnrt] | "u" hex hex hex hex }
  hex  { $[0-9a-fA-F] }

  whitespace { $[ \n\r\t] }

  "{" "}" "[" "]" "$"
}

@skip { whitespace }
list<item> { item ("," item)* }

@external propSource jsonHighlighting from "./highlight"

@detectDelim
